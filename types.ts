/* eslint-disable no-unused-vars */

export type MapMarker = {
  style: string;
  label: string;
  aos?: string;
};

export type ReachSectionProps = {
  markers: MapMarker[];
};
export interface IService {
  flatten_name: string;
  real_name: string;
  price: number;
  duration: number;
  description: string;
  isCustomService: boolean;
}
export interface Payment {
  amount: number;
  date: number;
  result: string;
}
export type PortfolioImage = {
  src: string;
  text: string;
};
export type PremiumConfig = {
  targetClients: number | null;
  autoBooking: boolean | null;
  highlighted: boolean | null;
  adBudgetPLN?: number;
  monthlyPricePLN: number;
  averageServicePricePLN?: number;
  estimatedMonthlyGainPLN?: number;
  lastUpdatedAt: number;
};
export type User = {
  uid: string;
  name: string;
  email: string;
  description: string;
  logo: string;
  bannerUrl?: string;
  dailyClients?: number;

  seek: boolean;
  emailVerified: boolean;
  configured: boolean;
  active: boolean;
  premiumActive?: boolean;
  profileComments: string[];
  password: string;

  portfolioImages: PortfolioImage[];
  payments: Payment[];
  services: IService[];
  location: { lng: number; lat: number; address: string };
  phoneNumber: string;
  userSlugUrl?: string;
  premiumConfig?: PremiumConfig;
  subscriptionId?: string;
  customerId?: string;
  subscription?: {
    id: string;
    status: string;
    currentPeriodEnd?: number;
    cancelAtPeriodEnd?: boolean;
  };
  metadata?: {
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
  };
  settings?: {
    emailNotifications?: boolean;
    autoReminders?: boolean;
    darkMode?: boolean;
    twoFactorEnabled?: boolean;
    publicProfile?: boolean;
    fontFamily?: string;
  };
};

export interface ICity {
  id: string;
  name: string;
}

export type Post = {
  manual?: boolean;
  postId: string;
  title: string;
  sections: Section[];
  intro: string;
  outro: string;
  tags: string[];
  url: string;
  slug?: string;
  metaTitle?: string;
  metaDescription?: string;
  metaKeywords?: string[];
  mainImage: string;
  images?: string[];
  faq: {
    question: string;
    answer: string;
  }[];
  blogType: string;
  creationTime: number;
  viewerCount?: number;
  readTime?: number;
  citySlug?: string; // For city-based posts
  isAutogenerated?: boolean; // To distinguish auto-generated posts
};

export type Section = {
  title: string;
  content: string;
  id?: number;
};

export type ImageType = {
  src: string;
  alt: string;
};

// Additional types for blog admin components
export type BlogType = "art" | "tattoo" | "design" | "inspiration";

export type FaqItem = {
  question: string;
  answer: string;
};

export type TagInputProps = {
  tagInput: string;
  setTagInput: (value: string) => void;
  addTag: () => void;
  removeTag: (index: number) => void;
  input: Post;
};

export type FaqHandlerProps = {
  input: Post;
  setInput: (post: Post) => void;
};

export type PostImagesProps = {
  input: Post;
  setInput: (post: Post) => void;
};

export type SectionContentEditorProps = {
  addSection: (title: string, content: string) => void;
};

export type SectionsListProps = {
  input: Post;
  setSelectedSection: (section: Section) => void;
  setSectionEditorOpen: (open: boolean) => void;
  removeSection: (index: number) => void;
};

export type EditSectionProps = {
  selectedSection: Section;
  setSelectedSection: (section: Section) => void;
  selectedPost: Post;
  setSelectedPost: (post: Post) => void;
  setSectionEditorOpen: (open: boolean) => void;
  sectionEditorOpen: boolean;
};

export interface IProjectImage {
  src: string;
  desc: string;
}

export interface IProject {
  name: string;
  desc: string;
  images: IProjectImage[];
  url: string;
  time: string;
  price: any;
  days: number;
  id: string;
  creationTime: number;
  isPaid: boolean;
  extraDays: number;
  salaryValue: string;
  duration: string;
  tags: any;
  userType: string;
  pseudo: string;
}

export type GenerateIdeaParams = {
  additional: string;
  place: string;
  product: string;
  target: string;
  investment: string;
};
export type ImageProps = {
  src: string;
  prompt: string;
  author: string;
  isPublic: boolean;
  likes: number;
  comments: [];
  creationTime: number;
};

export type IdeaResponse = {
  name: string;
  content: string;
};

export type Offer = {
  generatedIdeaTitle: string;
  generatedIdeaDesc: string;
  offerCategory: string;
  offerSubcategory: string;
  candidates: Candidate[];
  offerPrice: number;
  bids: Bid[];
  opId: string;
  opJoined: Date;
  opProfileComments: Comment[];
  opTotalSpent: number;
  opTotalReceived: number;
  opProfileVerified: boolean;
};

export type JobPosting = {
  authorId: string;
  creationTime: number;
  days: string;
  description: string;
  email: string;
  expirationTime: number;
  id: string;
  isPaid: boolean;
  location: string;
  name: string;
  phone: string;
  price: number;
  requirements: string;
  salary: string;
  salaryValue: string;
  tags: Array<{
    categoryTitle: string;
    categoryUrl: string;
    slugTitle: string;
    slugUrl: string;
  }>;
  title: string;
  url: string;
  website: string;
  slug: string;
  category: string;
  job: string;
};
export type Candidate = {
  id: string;
  name: string;
  email: string;
  verified: boolean;
  profileComments: Comment[];
  totalSpent: number;
  totalReceived: number;
  profileVerified: boolean;
};

export type Bid = {
  id: string;
  amount: number;
  createdAt: Date;
  candidateId: string;
  offerId: string;
};

export type Comment = {
  id: string;
  text: string;
  createdAt: Date;
  authorId: string;
  authorName: string;
  authorEmail: string;
  authorVerified: boolean;
  offerId?: string;
  candidateId?: string;
};
export type JobOffer = {
  city: string; // City where the job is located
  days: number; // Duration of the job in days
  description: string; // Job description in HTML format
  email: string; // Contact email for the job
  isPaid: boolean; // Whether the job is paid or not
  location: string; // Additional location details
  name: string; // Name of the company or person offering the job
  phone: string; // Contact phone number
  places: string[]; // Array of place types (e.g., 'Hybrydowy')
  preferences: string[]; // Array of job preferences (e.g., 'Umowa o pracę', 'Pełny etat')
  price: number; // Price or hourly rate for the job
  region: string; // Region where the job is located
  requirements: string; // Additional job requirements
  salary: string; // Salary type (e.g., 'Per Milestone')
  salaryValue: string; // General salary value (optional field)
  salaryValueBruttoFrom: number | string; // Gross salary range (from)
  salaryValueBruttoTo: number | string; // Gross salary range (to)
  salaryValueNettoFrom: number | string; // Net salary range (from)
  salaryValueNettoTo: number | string; // Net salary range (to)
  specializations: string[]; // Array of specializations (e.g., 'AI/ML')
  tags: string[]; // Array of tags associated with the job
  technologies: string[]; // Array of technologies required for the job
  title: string; // Title of the job offer
  website: string; // Company or job website URL
  logo: string;
  niceToHave: string;
  responsibilities: string;
  weOffer: string;
  job: string;
  category: string;
  slug: string;
  creationTime: string;
  uid: string;
  level: string;
};

export interface Tag {
  url: string;
  categoryUrl: string;
  categoryTitle: string;
  slugUrl: string;
  slugTitle: string;
}
